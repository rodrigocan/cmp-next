// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  tickets       Ticket[]
  info          Info[]
  @@map(name: "users")
}

model Ticket {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String
  place         Place    @relation(fields: [placeId], references: [id])
  placeId       Int
  sector        Sector   @relation(fields: [sectorId], references: [id])
  sectorId      Int
  contact_email String
  contact_phone String
  responsible   User?    @relation(fields: [responsibleId], references: [id])
  responsibleId Int?
  requester     String
  issue         String?
  solution      String?
  info          Info[]
  service       Service  @relation(fields: [serviceId], references: [id])
  serviceId     Int
  status        Status   @default(Em_aberto)
}

model Place {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  city      String
  state     String
  address   String
  zip_code  String
  tickets   Ticket[]
  sector    Sector[]
}

model Sector {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  place        Place    @relation(fields: [placeId], references: [id])
  placeId      Int
  email        String
  phone_number String
  Ticket       Ticket[]
}

model Info {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  doc_path    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  ticketId    Int
}

model Service {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  system    String
  subsystem String
  name      String
  Ticket    Ticket[]
}

enum Status {
  Em_aberto
  Em_andamento
  Resolvido
}